{"version":3,"sources":["index.js"],"names":["Index","props","state","champion","championName","question","answer","currentA","maxA","inputID","scoring","error","pressCheck","bind","scoringManager","uri","fetch","then","response","a","json","DATA","getToChampionData","console","responseError","version","setState","log","extractRandomInfo","window","addEventListener","class","for","type","id","value","onClick","this","placeholder","answerToName","event","key","document","getElementById","click","name","targetInputID","tempName","replace","targetInput","String","string","fromCharCode","charCodeAt","addResult","tempAnswer","filter","tempCurrentN","push","reload","reloadQuestion","reloadResult","reloadNum","innerText","join","score","tempStateScoring","target","style","backgroundColor","setTimeout","reloadBrink","reloadResp","championData","championNameArray","Object","keys","data","targetIndex","i","calcRand","Math","floor","random","length","targetName","includes","targetChamp","matchingName","blurb","RegExp","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.c2aa87de.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            champion: {},\n            championName: '',\n            question: '',\n            answer: [],\n            currentA: 0,\n            maxA: 0,\n            inputID: 'haveApie',\n            scoring: '判定',\n            error: false,\n        }\n        this.pressCheck = this.pressCheck.bind(this);\n        this.scoringManager = this.scoringManager.bind(this);\n    }\n\n    //コンポーネント読み込み時の処理\n    componentDidMount() {\n        const uri = 'https://ddragon.leagueoflegends.com/api/versions.json';\n        fetch(uri).then(async response => {\n            try {\n                const DATA = await response.json();\n                this.getToChampionData(DATA[0]);\n            } catch (error) {\n                console.error(error);\n                this.responseError(uri);\n            }\n        });\n    }\n\n    //受け取ったバージョンデータを元にチャンピオンデータを要求\n    //他の用途への再利用は不可\n    getToChampionData(version) {\n        const uri = `https://ddragon.leagueoflegends.com/cdn/${version}/data/ja_JP/champion.json`;\n        fetch(uri).then(async response => {\n            try {\n                const DATA = await response.json();\n                this.setState({\n                    champion: DATA,\n                }, () => {\n                    console.log('データ取得に成功');\n                    this.extractRandomInfo(this.state.champion);\n                    window.addEventListener('keypress', this.pressCheck);\n                });\n            } catch (error) {\n                console.error(error);\n                this.responseError(uri);\n            }\n        });\n    }\n\n\n    render() {\n        return (\n            <div class=\"index_container\">\n                <div class=\"acordion_wrapper\">\n\n                    <label for=\"index_info_label\" class=\"index_info_label\">このページについて</label>\n                    <input type=\"checkbox\" id=\"index_info_label\" class=\"acordion_checkbox\" />\n                    <div class=\"index_info acordion\">\n                        <p>\n                            良きサモナーの条件とは何か。技か？　心か？　強さか？　いいやッッッ！！　自らが操るチャンピオンたちへの理解度だねッッッ！！　自らの半身たるチャンピオンのことを知らない者を！！　良きサモナーなどと呼ぶことが出来ようかッッッ！！　というわけでチャンピオンへの理解度を試す試練を作ってみました。リロールボタンを押すと、ランダムなチャンピオンの説明文が名前が黒塗りにされた状態で表示されます。どのチャンピオンの説明文であるか当ててみてください。<br/>\n                        </p>\n                    </div>\n                </div>\n\n                <div class=\"inputers\">\n                    <input class=\"index_btn reroll\" type=\"button\" value=\"リロール\" onClick={() => { this.extractRandomInfo(this.state.champion) }} />\n                    <input class=\"index_textInput\" type=\"text\" id={this.state.inputID} placeholder=\"チャンピオン名を入力\" />\n                    <input class=\"index_btn answer\" type=\"button\" value=\"回答\" id=\"answerButton\" onClick={() => { this.answerToName(this.state.championName, this.state.inputID) }} />\n                </div>\n\n                <div id=\"question\" class=\"index_question\">ロード中...</div>\n                <div class=\"index_states\" id=\"states\">\n                    <p class=\"index_states_common\" id=\"states_scoring\">{this.state.scoring}</p>\n                    <p class=\"index_states_common\" id=\"states_num\">ロード中...</p>\n                </div>\n                <p class=\"index_result\" id=\"result\"></p>\n            </div>\n        );\n    }\n\n\n    //押されたキーが何であるか確認し、処理を行う\n    pressCheck(event) {\n        switch (event.key) {\n            case 'Enter':\n                document.getElementById('answerButton').click();\n                break;\n            default:\n                return false;\n        }\n    }\n\n    //ユーザーの回答した名前が正解かどうか判定\n    answerToName(name, targetInputID) {\n        if (this.state.error) {\n            return false;\n        }\n\n        //入力された名前から特殊記号を取り除く\n        //ⅣはジャーヴァンⅣのⅣ。アラビア数字に統一して判定する\n        let tempName = name.replace(/[・＝=&＆　 ']/g, '').replace(/Ⅳ/g, '4');\n        let targetInput = String(document.getElementById(targetInputID).value);\n        targetInput = targetInput.replace(/[・＝=&＆　 ']/g, '')\n            .replace(/[４四Ⅳ④❹⑷ⅳ⒋]/g, '4')\n            //ひらがなをカタカナに変換する\n            .replace(/[\\u3040-\\u309F]/g, (string) => { return String.fromCharCode(string.charCodeAt(0) + 0x60); });\n\n        console.log(targetInput + 'を入力');\n\n\n        //正解の場合にリザルトに正解したチャンピオンの名前を追加し、次の問題を読み込む\n        if (targetInput === tempName) {\n            console.log('正解');\n            this.addResult(name);\n            this.extractRandomInfo(this.state.champion);\n        } else {\n            console.log('不正解');\n        }\n        \n        //正解数などのスコアを評価\n        this.scoringManager(targetInput === tempName);\n        \n        //入力欄を空白にする\n        document.getElementById(this.state.inputID).value = '';\n    }\n\n    //正解したチャンピオン一覧に引数の名前を入れる\n    addResult(name) {\n        //stateの宣言時になぜか空白の要素が一つ入ってしまうのでそれを除去\n        let tempAnswer = this.state.answer.filter((value) => { return value !== \"\" });\n\n        //正解した数を+1\n        let tempCurrentN = this.state.currentA + 1;\n\n        tempAnswer.push(name);\n        this.setState({\n            answer: tempAnswer,\n            currentA: tempCurrentN,\n        }, () => {\n            console.log('現在の正解したチャンピオン:', this.state.answer);\n            this.reload();\n        })\n    }\n\n    //現在のステートに合わせて各DOMの内容を更新する\n    reload() {\n        this.reloadQuestion();\n        this.reloadResult();\n        this.reloadNum();\n    }\n    reloadQuestion() {\n        document.getElementById('question').innerText = this.state.question;\n    }\n    reloadResult() {\n        document.getElementById('result').innerText = this.state.answer.join();\n    }\n    reloadNum() {\n        document.getElementById('states_num').innerText = String(this.state.currentA) + '/' + String(this.state.maxA);\n    }\n\n\n    //スコアを表示するDOMの管理\n    scoringManager(score) {\n        let tempStateScoring = \"\";\n        if (score) {\n            tempStateScoring = '正解';\n        } else {\n            tempStateScoring = '不正解';\n        }\n\n        this.setState({\n            scoring: tempStateScoring,\n        }, () => {\n            const target = document.getElementById('states_scoring');\n            target.innerText = this.state.scoring;\n\n            if (this.state.scoring === '正解') {\n                target.style.backgroundColor = '#1971FF';\n                //正解の時だけ正解数の表記を光らせる\n                document.getElementById('states_num').style.backgroundColor = '#F2E700';\n                setTimeout(() => { this.reloadBrink() }, 500);\n            } else {\n                target.style.backgroundColor = '#FF4B00';\n            }\n\n            setTimeout(() => { this.reloadResp() }, 2000);\n        })\n    }\n    reloadResp() {\n        this.setState({\n            scoring: '判定',\n        }, () => {\n            document.getElementById('states_scoring').innerText = this.state.scoring;\n            document.getElementById('states_scoring').style.backgroundColor = '#F5F5DC';\n        })\n    }\n    reloadBrink() {\n        document.getElementById('states_num').style.backgroundColor = '#F5F5DC';\n    }\n\n\n    //ランダムな説明文を表示させる\n    extractRandomInfo(championData) {\n\n        //fetchによるデータの取得に失敗している場合、一切の処理を行わない\n        if (this.state.error) {\n            return false;\n        }\n\n        const championNameArray = Object.keys(championData.data);\n        let targetIndex = 0;\n\n        //同じチャンピオンの説明文を取り出していないかの確認\n        for (let i = 0; i < 1; i++) {\n            const calcRand = Math.floor(Math.random() * championNameArray.length);\n            const targetName = championData.data[championNameArray[calcRand]].name;\n            //名前が既出か||直前に出したものと同じか\n            if (this.state.answer.includes(targetName) || this.state.championName === targetName) {\n                if (this.state.answer.length >= championNameArray.length - 1) {\n                    return false;\n                } else {\n                    i--;\n                    continue;\n                }\n            }\n            //問題なければ現在参照中のインデックスをそのまま採用する\n            targetIndex = calcRand;\n        }\n\n        const targetChamp = championData.data[championNameArray[targetIndex]];\n        //本名とチャンピオン名が違う場合も同様に塗りつぶすために個別に塗りつぶす名前を設定\n        const matchingName = targetChamp.name + '|ヌヌ|ウィルンプ|子羊|ジャーヴァン王子|ラクサーナ・クラウンガード|サラ・フォーチュン';\n\n        console.log(targetIndex, targetChamp.blurb.replace(RegExp(matchingName, 'g'), '████'));\n\n        this.setState({\n            championName: targetChamp.name,\n            question: targetChamp.blurb.replace(RegExp(matchingName, 'g'), '████'),\n            maxA: championNameArray.length,\n        }, () => {\n            this.reload();\n        })\n    }\n\n    //fetchのデータ取得にエラーが起きた場合の処理\n    responseError(uri) {\n        console.log('データ取得でエラーが発生', uri);\n        this.setState({\n            question: 'データ取得時にエラーが発生しました。',\n            error: true,\n        }, () => {\n            this.reload();\n        })\n    }\n\n\n}\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}